흥국화재 15:00

# OOP (Object-Oriented Programming): 데이터를 추상화하여 상태와 행위를 가진 객체를 만들고, 객체들 간 상호작용을 통해 로직을 구성하는 프로그래밍 방법
	- 객체: 프로그램에서 사용되는 데이터 또는 식별자에 의해 참조되는 공간 / 값을 저장할 변수와 수행할 메소드를 묶어 만듦
	- 추상화: 객체들이 공통적으로 필요로 하는 속성이나 동작을 하나로 추출하는 작업 (K3, 아반떼 < 자동차)
		공통된 기능을 다시 정의할 필요없으므로(새로운 객체는 고유기능만 새로 만듦) 코드 중복이 줄고, 재사용 용이(상속을 통해)
	- 상속: 새로운 객체가 기존 객체의 자료와 연산을 이용할 수 있게 하는 기능 (아반떼 < 자동차 < 탈 것)
	- 다형성: 같은 자료형에 여러 타입의 데이터를 대입하여 다양한 결과를 얻어 낼 수 있는 성질
		오버라이딩: 부모클래스의 메소드를 자식클래스에서 재정의해서 사용
		오버로딩: 동명의 메소드를 다양한 타입과 개수로 재정의해서 사용
	- 캡슐화: 데이터와 메서드를 하나로 묶어, 외부에서 접근하지 못하게 보호하는 것 / 다른 클래스나 모듈에 대한 의존성을 낮추는 것 / private 등

# 용어
VO(domain): 
금융IT 시스템 구조 : 채널계, 계정계, 정보계, 운영계, 대외계
MVC (Model - View - Controller): 서로 분리되어 각자의 역할에 집중할 수 있게하여 유지보수, 확장성을 높이고, 코드의 중복을 방지
	Model: 애플리케이션의 정보, 데이터
	View: input text, checkbox 등 사용자 인터페이스 요소. 데이터를 기반으로 사용자들이 보는 화면
	Controller: 데이터와 사용자인터페이스 요소들을 잇는 다리역할. 
## 계정계: 고객의 거래 데이터 자체를 다루는 영역 / 계좌 계정을 관리하는 시스템이 모여 있는 곳
## 정보계: 고객정보, 분석정보, 수익관리, 고객관계관리, 성과관리, 위험관리 시스템 등 / 거래활동 및 성과를 분석하고 측정하기 위해 구축 / 기록 및 통계
## 대외계: 은행 외부 기관과 연계
