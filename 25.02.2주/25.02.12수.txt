책무: 금융회사 또는 금융회사 임직원이 준수해야하는 사항에 대한 내부통제 및 위험관리의 집행 및 운영에 대한 책임
query: DB에서 데이터를 조회하거나 수정하는 요청

SHOW DATABASES;
CREATE DATABASE practice DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
DROP DATABASE IF EXISTS practice;

use mysql;
SHOW TABLES;
DESC [테이블명]
CREATE DATABASE practice DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
CREATE TABLE [생성할 테이블명] AS (SELECT * FROM [기존 테이블명]);
DROP DATABASE IF EXISTS practice;

SELECT city AS 도시, COUNT(city) AS 집계
	FROM user
	WHERE user.age >= 18
	GROUP BY city
	HAVING city >= 'b'
	ORDER BY city
(FROM > WHERE > GROUP BY > HAVING > SELECT > ORDER BY)
SELECT * FROM [테이블명]
SELECT CustomerName AS 고객, Address AS 주소, PostalCode AS 우편번호 FROM Customers;

(SELECT [열1, 열2, ...] FROM [테이블명] WHERE [조건])
SELECT * FROM Customers WHERE Country = 'Germany';
SELECT * FROM Orders WHERE ShipperID <> 2; / !=
SELECT * FROM OrderDetails WHERE Quantity > 100;
SELECT * FROM Employees WHERE FirstName >= 'O';
SELECT * FROM Employees WHERE BirthDate <= '1950-01-01';

SELECT * FROM Table_name WHERE text LIKE '%은행%';
SELETC * FROM Table_name WHERE number BETWEEN 1 and 3;
SELECT * FROM Table_name WHERE text IN (1, 2, 3);
SELECT * FROM Table_name WHERE text IS NULL;

SELECT column1, column2, ... FROM Table_name ORDER By column1, column2, ... ASC LIMIT 5; / DESC
SELECT 1 - 2 + 2 * 3;
SELECT MOD(10, 3)
SELECT ROUND(30.60, 1)
SELECT CONCAT('신한', '은행')
SELECT SUBSTRING('20190422', 1, 4)
SELECT CURDATE();
SELECT CURTIME();

# 쿼리 중첩
SELECT MIN(a) FROM sample;
DELETE FROM sample WHERE a = (SELECT MIN(a) FROM sample);
SELECT (SELECT COUNT(*) FROM Customers WHERE Country = 'Germany') AS GermanyCount,
	(SELECT COUNT(*) FROM Customers WHERE Country = 'Mexico') AS MexicoCount;
SELECT * FROM (SELECT FirstName, LastName FROM Employees WHERE EmployeeID < 10);
SELECT * FROM orderDetails WHERE Quantity = (SELECT MAX(Quantity) FROM OrderDetails);

# 서브쿼리가 부모쿼리와 연관된 경우
DELETE FROM Customers WHERE EXISTS (SELECT * FROM Orders WHERE OrderDate >= "1996-07-08");
# 합집합
SELECT Country FROM Customers UNION SELECT Country FROM Suppliers ORDER BY Country;
SELECT Country FROM Customers UNION ALL SELECT Country FROM Suppliers ORDER By Country;
# 내부결합
SELECT * FROM Products, Employees WHERE Employees.EmplyeeID = Products.SupplierID;
SELECT * FROM Products INNER JOIN orderDetails ON Products.ProductID = OrderDetails.ProductID;
# 외부결합
SELECT * FROM Products LEFT JOIN Employees ON Employees.EmployeeID = Products.SupplierID;
SELECT * FROM Employees RIGHT JOIN Products ON Employess.EmployeeID - Products.SupplierID;

SAS: 통계분석용 패키지 / 시계열분석, 파일관리, 데이터베이스, 그래프, 행렬계산 등

## LIKE : 문자열 찾기
SELECT * FROM Products WHERE ProductName LIKE '_a%'; / 두 번째 글자가 a인 상품 조회
## IS : NULL과 비교시 / =으로 NULL을 비교하면 안되고 IS NULL을 사용해야 함
SELECT * FROM Orders WHERE ShippedDate IS NULL;
SELECT * FROM Orders WHERE ShippedDate IS NOT NULL;
## MOD : 두 숫자를 나눈 후 나머지 반환
SELECT * FROM Employees WHERE MOD(EmployeeID, 2) = 0; / EmployeeID가 짝수인 직원 조회
## SUBSTRING : 문자열 가져오기
SELECT SUBSTRING(Name, 2, 5) FROM Customers; / Customers에서 두 번째부터 다섯 번째 글자 가져오기
## UNION : 합집합, 중복 제거 / UNION ALL : 합집합, 중복 포함
## INNER JOIN : 교집합. 테이블 간 공통된(일치하는) 데이터만 가져옴
SELECT Orders.orderID, Customers.CustomerName FROM Orders INNER JOIN Customers ON orders.CustomerID = Customers.CustomerID;
	Orders와 Customers 테이블에서 CustomerID가 일치하는 데이터만 조회
## LEFT JOIN : 왼쪽 테이블 기준, 외부 조인 / 왼쪽 테이블의 모든 데이터를 가져오고, 오른쪽 테이블에 일치하는 데이터가 없으면 NULL 반환
SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustromerID = Orders.CustromerID;
	Customers 정보를 모두 가져와서, Orders가 없는 고객도 표시 (없는 경우 OrderID가 NULL로 표기)

# Practice
- 고객 계좌 목록 조회
SELECT AccountID, AccountType, Balance FROM Accounts WHERE CustomerID = 12345;
- 최근 거래 내역 조회 / 최근 10건
SELECT TransactionID, TransactionDate, Amount, TransactionType FROM Transactions
	WHERE AccountID = 67890 ORDER BY TransactionDate DESC LIMIT 10;
- 입금(Deposit) 처리
UPDATE Accounts SET Balance = Balance + 50000 WHERE AccountID = 67890;
- 출금(Withdraw) 처리 / 잔액 부족시 출금되지 않게 AND Balance >= 50000
UPDATE Accounts SET Balance = Balance - 50000 WHERE AccountID = 67890 AND Balance >= 50000;
- 총 자산 조회 / ID 12345 고객의 자산 SUM
SELECT CustomerID, SUM(Balance) AS TotalAssets FROM Accounts GROUP BY CustomerID HAVING CustomerID = 12435;
- 특정 기간 동안의 총 거래 금액
SELECT SUM(Amount) AS TotalTransactions FROM Transactions WHERE TransactionDate BETWEEN '2024-01-01' AND '2024-01-31';
- 인덱스 생성(조회 속도 개선)
CREATE INDEX idx_customer_accounts ON Accounts(CustomerID);
- 트랜잭션(Transaction) 처리 / 입출금 원자성 보장
START TRANSACTION; / 출금, 입금이 동시에 성공해야함
UPDATE Accounts SET Balance = Balance - 50000 WHERE AccountID = 12345;
UPDATE Accounts SET Balance = Balance + 50000 WHERE AccountID = 67890;
COMMIT; / 성공시 확정, ( ROLLBACK : 오류 시 되돌리기 )
- 금융 거래 로그 저장 (트리거) / 새로운 거래(Transactions) 발생 시 자동으로 로그(TransactionLogs)에 기록
CREATE TRIGGER trg_transaction_log AFTER INSERT ON Transactions FOR EACH ROW
	INSERT INTO TransactionLogs (TransactionID, AccountID, Amount, TransactionDate, ActionType)
	VALUES (NEW.TransactionId, NEW.AccountID, NEW.Amount, NEW.TransactionsDate, 'INSERT');
- 고객 로그인 시도 로그 기록
CREATE TABLE LoginAttempts (
	AttemptID INT AUTO_INCREMENT PRIMARY KEY,
	CustomerID INT,
	AttemptTime TIMESTAMP DEFAULT CURRENT+TIMESTAMP,
	Status VARCHAR(20)
);
INSERT INTO LoginAttempts (CustomerID, Status) VALUES (12345, 'SUCCESS');
- 고객 정보 암호화 저장 (MySQL AES_ENCRYPT) / 주민번호(SSN) 암호화 / 조회 시 복호화 필요
INSERT INTO Customers (CustomerID, Name, SSN) VALUES (12345, '홍길동', AES_ENCRYPT('920101-1111111', 'secretkey'));
SELECT CustomerID, Name, AES_DECRYPT(SSN, 'secretkey') AS SSN FROM Customers;
- 계좌 정보 접근 권한 설정
GRANT SELECT, UPDATE ON Accounts To 'bank_teller'@'localhost'; // 은행 직원에게 select, update 권한만 부여
REVOKE DELETE ON Accounts FROM 'back_teller'@'localhost'; // 실수로 데이터 삭제 방지

## 기본 인덱스 (Single Column Index) : 단일 컬럼에 인덱스를 생성해 검색 속도 향상
CREATE INDEX idx_customer_accounts ON Accounts(CustomerID); // WHERE CustomerID = ? 조건문은 빠르게 실행됨
EXPLAIN SELECT * FROM Accounts WHERE CustomerID = 12345; // type: INDEX (인덱스를 사용해 빠르게 검색)
## 다중 컬럼 인덱스 (Composite Index) : CustomerID의 특정 계좌 유형(AccountType)을 빠르게 찾고 싶다면
CREATE INDEX idx_customer_type ON Accounts(CustomerID, AccountType); // WHERE CustomerID=? AND AccountType=? 조건문은 빠르게 실행됨
## UNIQUE INDEX : 중복이 없는 유일한 값에 대한 인덱스(중복값 INSERT INTO 시 에러) / 계좌번호(AccountNumber) 등에 적용
CREATE UNIQUE INDEX idx_unique_account_number ON Accounts(AccountNumber);
## FULLTEXT INDEX : 덱스트 검색 최적화 / 거래내역(Transaction Details) 등에 특정 키워드 포함 데이터 검색에 적용
CREATE FULLTEXT INDEX idx_transaction_details ON transactions(Description);
SELECT * FROM Transactions WHERE MATCH(Description) AGAINST('송금') // LIKE '%키워드%' 대신 사용 가능

## 트랜잭션
// 오류 시 rollback, 성공 시 commit // 둘 다 transaction 종료
START TRANSACTION; // 트랜잭션 시작 > 트랜잭션 내 실행되는 모든 SQL문은 하나의 단위로 묶여서 처리 >> COMMIT 전 까지 확정되지 않음
UPDATE Accounts SET Balance = Balance - 50000 WHERE AccountID = 12345;
UPDATE Accounts SET Balance = Balance + 50000 WHERE AccountID = 67890;
IF @@ERROR != 0 
BEGIN // 오류시 rollback
	ROLLBACK; 
	RETURN;
END
COMMIT; // 정상 실행되면 commit

// savepoint지점 이전까지의 코드는 실패해도 적용됨, 
START TRANSATION;
UPDATE Accounts SET Balance = Balance - 50000 WHERE AccountID = 12435;
SAVEPOINT before_second_update; // 중간 체크포인트 설정: 에러가 나더라도 이전 코드는 적용됨
UPDATE Accounts SET Balance = Balance + 50000 WHERE AccountID = 67890;
ROLLBACK TO SAVEPOINT before_second_update;
COMMIT;

- 최근 이체 내역 조회 // 최근(DESC) 5건(LIMIT 5)
SELECT TransactionID, FromAccountID, ToAccountID, Amount, TranscationDate FROM Transactions
	WHERE CustomerID = 12345 ORDER BY TransactionDate DESC LIMIT 5;
- 계좌 이체 트랜잭션 처리
START Transaction;
UPDATE Accounts SET Balance = Balance - 50000 WHERE AccountID = 12345 AND Balance >= 50000; // 첫 째 계좌에서 출금
UPDATE Accounts SET Balance = Balance + 50000 WHERE AccountID = 67890; // 둘 째 계좌에 입금
// 둘 째 계좌가 존재하지 않을 경우
IF (SELECT COUNT(*) FROM Accounts WHERE AccountID = 67890) = 0
BEGIN
	ROLLBACK;
	PRINT 'Error: Target account does not exist';
	RETURN;
END
COMMIT;
- 고객별 거래 금액이 가장 많이 발생한 기간 조회
SELECT CustomerID, YEAR(TransactionDate) AS Year, MONTH(TransactionDate) AS Month, SUM(Amount) AS TotalTransactionAmount
FROM Transactions GROUP BY CustomerID, YEAR(TransactionDate), MONTH(TransactionDate) ORDER BY CustomerID, TotalTransactionAmount DESC;
- 거래 빈도가 높은 계좌(부정 거래 탐지)
SELECT AccountID, COUNT(*) AS TransactionCount FROM Transactions
	GROUP BY AccountID HAVING COUNT(*) > 100 ORDER BY TransactionCount DESC; // 거래 횟수 100초과, 거래 횟수 많은 순 정렬
- 월별 수익, 손실 (재무 보고서)
SELECT YEAR(TransactionDate) AS Year, MONTH(TransactionDate) AS Month
	SUM(CASE WHEN Amount > 0 THEN Amount ELSE 0 END) AS TotalIncome, // amount > 0 인 경우에만 SUM // amount <= 0 이면 0을 더함
	SUM(CASE WHEN Amount < 0 THEN Amount ELSE 0 END) AS TotalLoss
FROM Transactions GROUP BY YEAR(TransactionDate), MONTH(TransactionDate) ORDER BY Year DESC, Month DESC;

# 테이블 생성
CREATE TABLE Customers ( // 고객 테이블
	CustomerID INT PRIMARY KEY AUTO_INCREMENT,
	CustomerName VARCHAR(100) NOT NULL,
	Email VARCHAR(100) UNIQUE NOT NULL,
	PhoneNumber VARCHAR(20),
	CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE Accounts ( // 계좌 테이블
	AccountID INT PRIMARY KEY AUTO_INCREMENT,
	CustomerID INT,
	AccountNumber VARCHAR(20) UNIQUE NOT NULL,
	Balance DECIMAL(15,2) DEFAULT 0.00, // 총 15자리 숫자 저장, 소수점 2자리를 포함하므로 정수는 13자리
		// FLOAT나 DOUBLE은 부동소수점 오차 문제가 있으므로 금융 데이터에서는 사용하지 않음
	AccountType ENUM('Savings', 'Checking', 'Credit') NOT NULL, // ENUM은 미리 정의된 값 중 하나만 저장할 수 있는 데이터 타입(숫자)
		// 문자열 대신 내부적으로 숫자로 저장 : Savings=1, Checking=2, Credit=3
	CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);
CREATE TABLE Transactions ( // 거래 내역 테이블
	TransactionID INT PRIMARY KEY AUTO_INCREMENT,
	AccountID INT,
	Amount DECIMAL(15,2) NOT NULL,
	TransactionType ENUM('Deposit', 'Withdrawal', 'Transfer') NOT NULL,
	TransactionDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (AccountID) REFERENCE Accounts(AccountID) ON DELETE CASCADE
);
CREATE TABLE LoginAttempts ( // 로그인 시도 기록 테이블
	AttemptID INT PRIMARY KEY AUTO_INCREMENT,
	UserID INT,
	AttemptTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	IPAddress VARCHAR(45),
	Success BOOLEAN // 내부적으로 숫자로 저장(1,0)
);
CRATE TABLE AccountAuditLog ( // 계좌 변경 감사 로그 테이블
	LogID INT PRIMARY KEY AUTO_INCREMENT,
	AccountID INT,
	OldBalance DECIMAL(15,2),
	NewBalance DECIMAL(15,2),
	ChangeDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID) ON DELETE CASCADE
);

# 자점감사 시스템 고도화 / 기업은행
제안목적: 신기술을 활용한 업무 자동화 및 고도화, 자점감사 업무 효율성 향상
- 자점감사 점검현황, 개선사항, 지연사항 정보 제공
- 자점감사 정보 수정이 용이한 UI/UX 제공
- 외부 보고서 및 내부보고서 자동 생성
- 관리활동의 적정성 점검 수단 제공


## 레거시
방카슈랑스: 
BPR: 
FAMS: 
AML: 
ITSM: 
R & R: 
명령휴가: 
기업여신 RM: 
deffered: 미리 지정된 작업 스케줄에 의해 진행. 처리 대상 데이터 건수에 따라 작업 주기 조정 ?= batch
영업이익 / 당기순이익:
Nexacro: 
Clipreport: 
tomcat: 
CSR: 
















